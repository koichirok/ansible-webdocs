#!/usr/bin/env python
#

DOCUMENTATION = '''
---

module: ansible_docstring
short_description: Create markdown file for a modules docs
description:
    - Offers ability to dynamically create local markdown files
      (web docs) to be used offline for custom modules without
      requiring use of 'make webdocs'.  Also works on Core modules.
    - Only a single dir is supported in this release (no recursive dirs)
author: Jason Edelman (@jedelman8)
requirements:
    - Ansible must be installed
    - Modules must have proper Ansible doc and example strings
    - 'modules' must be the variable name that is registered in the playbook
    - The Jinja template called ansible-docs.j2 is required
notes:
    - This module uses module_docs that that is part of the Ansible project
      to extract the required strings from Ansible modules
options:
    path:
        description:
            - absolute path to a directory where the Ansible module(s) are stored
        required: true
        default: null
        choices: []
        aliases: []
    doc_fragments_path:
        description:
            - absolute path to a directory where the doc fragment(s) are stored
'''

EXAMPLES = '''
# FULL PLAYBOOK EXAMPLE
  - name: get docs and examples for modules
    ansible_docstring:
      path=/usr/share/ansible/files/
    register: modules

  - name: build web/markdown ansible docs
    template:
      src: templates/ansible-docs.j2
      dest: web/ansiblefilesdoc.md
'''

from os import walk
from ansible.plugins.loader import module_loader, PluginLoader
from ansible.module_utils._text import to_native
from ansible.utils import plugin_docs


def main():
    module = AnsibleModule(
        argument_spec=dict(
            path=dict(required=True, type='path'),
            doc_fragments_path=dict(type='path',default=None),
        ),
        supports_check_mode=False
    )

    path = os.path.normpath(module.params['path'])
    if module.params['doc_fragments_path']:
        fragment_loader = PluginLoader(
            'ModuleDocFragment',
            'ansible.utils.module_docs_fragments',
            os.path.realpath(module.params['doc_fragments_path']),
            ''
        )
    else:
        from ansible.plugins.loader import fragment_loader

    all_docs = []
    errors = []
    for (dirpath, dirnames, ansible_modules) in walk(path):
        if os.path.normpath(dirpath) == path:
            module_loader.add_directory(dirpath)
            for mod in ansible_modules:
                # skip dot files
                if  mod.startswith('.'):
                    continue
                mod = os.path.splitext(mod)[0]  # removes the extension
                in_path = module_loader.find_plugin(mod)
                if in_path:
                    try:
                        doc, plainexamples, returndocs, metadata = plugin_docs.get_docstring(in_path, fragment_loader)
                        doc['returndocs'] = returndocs
                        doc['metadata'] = metadata
                    except Exception as e:
                        module.fail_json(msg='error processing file: {}: {}'.format(in_path,to_native(e)))

                    try:
                        examples_list = plainexamples.split('\n')
                        doc['examples'] = examples_list
                    except:
                        errors.append(doc)
                        errors.append('error-examples')
                        continue

                    all_docs.append(doc)

    module.exit_json(results=all_docs, errors=errors)

from ansible.module_utils.basic import *
main()
